import { useState } from "react";
import SectionContainer from "../shared/SectionContainer";
import SectionHeader from "../shared/SectionHeader";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import productSchema from "../../schemas/product.schema";
import InputStyled from "../shared/InputStyled";
import en from "../../locale/en.json";
import styles from "./form.module.css";
import { categories } from "../../schemas/product.schema";
import SelectStyled from "../shared/SelectStyled";
import ButtonStyled from "../shared/ButtonStyled";
import { pascalCase } from "../../utils/functions/general";
import { appRoutes } from "../../config/routes";
import { createProduct, updateProduct } from "../../api/utils/products";
import toast from "react-hot-toast";
import { useNavigate } from "react-router-dom";

const { category, description, goBack, name, price, edit, add } =
  en.pages.product.form;

const options = categories.map((category) => ({
  label: pascalCase(category),
  value: category,
}));

const Form = ({ type, product }) => {
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(productSchema),
  });

  const onSubmitHandler = async (data) => {
    setIsLoading(() => true);

    try {
      // not good implementation, but there is no time to make a new component for this

      // id should be generated by the server or database

      !product?.id &&
        (await createProduct({
          id: `${Math.floor(Math.random() * 100)}`,
          relase_date: new Date().getFullYear().toString(),
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          ...data,
        }));

      product?.id &&
        (await updateProduct(product.id, {
          created_at: new Date().toISOString(),
          ...data,
        }));

      product?.id && navigate(appRoutes.home);

      toast.success("Successfully");

      reset();
      setIsLoading(() => false);
    } catch (error) {
      toast.error("somthing went wrong");
      console.log(error);
      setIsLoading(() => false);
    }
  };

  return (
    <SectionContainer>
      <SectionHeader title={`${pascalCase(type)} Product`} />

      <form
        onSubmit={handleSubmit(onSubmitHandler)}
        className={`${styles.form}`}
      >
        <div className={styles.inputContainer}>
          <InputStyled
            label={name}
            defaultValue={product?.name}
            placeholder={"type name here"}
            id={"name"}
            error={errors.name?.message}
            disabled={isLoading}
            {...register("name")}
          />

          <InputStyled
            label={price}
            defaultValue={product?.price}
            placeholder={"type price here"}
            id={"price"}
            type={"number"}
            step="any"
            error={errors.price?.message}
            disabled={isLoading}
            {...register("price")}
          />

          <SelectStyled
            label={category}
            options={options}
            defaultValue={product?.category}
            defaultText={"Select a category"}
            error={errors.category?.message}
            {...register("category")}
          />
        </div>

        <InputStyled
          label={description}
          placeholder={"type description here"}
          id={"price"}
          elemType={"textarea"}
          defaultValue={product?.description}
          error={errors.description?.message}
          disabled={isLoading}
          {...register("description")}
        />

        <div className={styles.btnsContainer}>
          <ButtonStyled
            border
            success
            title={product ? edit : add}
            type="submit"
            disabled={isLoading}
          />

          <ButtonStyled
            border
            warning
            href={appRoutes.home}
            title={goBack}
            disabled={isLoading}
          />
        </div>
      </form>
    </SectionContainer>
  );
};

export default Form;
